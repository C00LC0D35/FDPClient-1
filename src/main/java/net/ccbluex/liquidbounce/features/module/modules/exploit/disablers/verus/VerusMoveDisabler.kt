package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.verus

import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.minecraft.stats.StatList
import net.minecraft.init.Blocks
import net.minecraft.item.ItemStack
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement
import net.minecraft.network.play.client.C03PacketPlayer


class VerusMoveDisabler : DisablerMode("VerusMove") {
    
    override fun onUpdate(event: UpdateEvent) {
        if (mc.thePlayer.ticksExisted % 2 == 0) {
          val pos = mc.thePlayer.position.add(0.0, -1.5, 0.0)
          mc.netHandler.addToSendQueue(
              C08PacketPlayerBlockPlacement(pos, 1,
              ItemStack(Blocks.stone.getItem(mc.theWorld, pos)), 0.0F, 0.5F + Math.random().toFloat() * 0.44.toFloat(), 0.0F)
              )
        }
    }

    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (packet is C03PacketPlayer) {
          if (mc.thePlayer.ticksExisted % 20 <= 1) {
              event.cancelEvent()
          } else if (mc.thePlayer.ticksExisted % 20 == 2) {
              event.cancelEvent()
              PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 3.35, mc.thePlayer.posZ, false))
              PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, false))
              PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
          }
       }
    }
}
